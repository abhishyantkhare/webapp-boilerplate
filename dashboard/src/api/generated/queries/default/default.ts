/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Engram Backend API
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  CreateUserRequest,
  HTTPValidationError
} from '../../schemas'



/**
 * @summary Sign In User
 */
export const signInUserUsersPost = (
    createUserRequest: CreateUserRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.post(
      `/users`,
      createUserRequest,options
    );
  }



export const getSignInUserUsersPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signInUserUsersPost>>, TError,{data: CreateUserRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof signInUserUsersPost>>, TError,{data: CreateUserRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signInUserUsersPost>>, {data: CreateUserRequest}> = (props) => {
          const {data} = props ?? {};

          return  signInUserUsersPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SignInUserUsersPostMutationResult = NonNullable<Awaited<ReturnType<typeof signInUserUsersPost>>>
    export type SignInUserUsersPostMutationBody = CreateUserRequest
    export type SignInUserUsersPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Sign In User
 */
export const useSignInUserUsersPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signInUserUsersPost>>, TError,{data: CreateUserRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof signInUserUsersPost>>,
        TError,
        {data: CreateUserRequest},
        TContext
      > => {

      const mutationOptions = getSignInUserUsersPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    